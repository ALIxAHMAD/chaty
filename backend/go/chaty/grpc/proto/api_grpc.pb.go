// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: api.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServiceClient interface {
	ChatyService(ctx context.Context, opts ...grpc.CallOption) (ChatService_ChatyServiceClient, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) ChatyService(ctx context.Context, opts ...grpc.CallOption) (ChatService_ChatyServiceClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[0], "/chaty.ChatService/ChatyService", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceChatyServiceClient{stream}
	return x, nil
}

type ChatService_ChatyServiceClient interface {
	Send(*ClientEvents) error
	Recv() (*ServerEvents, error)
	grpc.ClientStream
}

type chatServiceChatyServiceClient struct {
	grpc.ClientStream
}

func (x *chatServiceChatyServiceClient) Send(m *ClientEvents) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatServiceChatyServiceClient) Recv() (*ServerEvents, error) {
	m := new(ServerEvents)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatServiceServer is the server API for ChatService service.
// All implementations must embed UnimplementedChatServiceServer
// for forward compatibility
type ChatServiceServer interface {
	ChatyService(ChatService_ChatyServiceServer) error
	mustEmbedUnimplementedChatServiceServer()
}

// UnimplementedChatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (UnimplementedChatServiceServer) ChatyService(ChatService_ChatyServiceServer) error {
	return status.Errorf(codes.Unimplemented, "method ChatyService not implemented")
}
func (UnimplementedChatServiceServer) mustEmbedUnimplementedChatServiceServer() {}

// UnsafeChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServiceServer will
// result in compilation errors.
type UnsafeChatServiceServer interface {
	mustEmbedUnimplementedChatServiceServer()
}

func RegisterChatServiceServer(s grpc.ServiceRegistrar, srv ChatServiceServer) {
	s.RegisterService(&ChatService_ServiceDesc, srv)
}

func _ChatService_ChatyService_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServiceServer).ChatyService(&chatServiceChatyServiceServer{stream})
}

type ChatService_ChatyServiceServer interface {
	Send(*ServerEvents) error
	Recv() (*ClientEvents, error)
	grpc.ServerStream
}

type chatServiceChatyServiceServer struct {
	grpc.ServerStream
}

func (x *chatServiceChatyServiceServer) Send(m *ServerEvents) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatServiceChatyServiceServer) Recv() (*ClientEvents, error) {
	m := new(ClientEvents)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatService_ServiceDesc is the grpc.ServiceDesc for ChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chaty.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ChatyService",
			Handler:       _ChatService_ChatyService_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}
